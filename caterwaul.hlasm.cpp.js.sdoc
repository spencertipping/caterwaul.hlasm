C++ high-level assembler | Spencer Tipping
Licensed under the terms of the MIT source code license

Introduction.
This module exists to generate C++ from high-level assembly definitions. It wouldn't be used much in production; it's primarily useful for me to debug stuff. Something useful may end up coming
out of it though. If you let a Javascript program run in interpreted mode for some time, you can take the collected traces and emit specialized code for them. It's theoretically possible to
leverage this to generate performant C++ for a given Javascript workflow.

This module is also a good place to look if you're interested in writing a new backend, as it is really simple.

Assembler operation.
Assembly arrives in basic blocks, each of which contains one or more data streams. This backend doesn't rearrange anything; it just places data streams one after another. It also doesn't write
particularly optimal C++ code. (A better approach, for instance, would be to use SSE2 vector intrinsics for parallel floating-point operations. No such cleverness here.)
