IA-32 high-level assembler | Spencer Tipping
Licensed under the terms of the MIT source code license

Block hints and alignment.
x86 uses variable-length instructions and has instruction-decoding bottlenecks when jump targets aren't properly aligned. Normally the penalty doesn't justify taking special action, but hot
blocks should be aligned to minimize problems. There are two ways that a block can be marked as hot. One is to simply let the program run and keep track of the block's execution count. At the
next recompilation cycle we then emit an optimized version of that block. The other way is to heuristically set the 'hot' hint on the block. This is appropriate if we see a block inside an
inner loop; for example:

| for (var i = 0; ...) {
    for (var j = 0; ...) {
      // This block is almost certainly hot, so it should be aligned.
    }
  }

Block alignment inside a sequence isn't necessarily simple. There are a few different ways to do it, and some are faster than others. The obvious way is to just use an unconditional jump:

| block_1:
    ...
    jmp .block_2
    ; filler bytes
  block_2:
    ...

However, this approach may not yield optimal results for performance purposes, especially if the extra space is due to compressed instruction encodings in the first place. (The consequence is
twofold: first, there's an extra jump; and second, there's potentially suboptimal instruction decoding.)

Another approach involves using nop instructions. This is workable but also has disadvantages; the nops themselves take execution time and contribute to decoding latency.

The most performant approach is to take advantage of the redundancy in some x86 instructions to find encodings that pack into the right decode patterns and block sizes. I believe this problem
is NP however.
